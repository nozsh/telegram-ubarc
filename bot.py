from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API
ADMIN_ID = int(os.getenv('ADMIN_ID'))  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
userbots_str = os.getenv('USERBOTS')  # –°—Ç—Ä–æ–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —é–∑–µ—Ä–±–æ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ userbots –≤ —Å–ø–∏—Å–æ–∫
userbots = userbots_str.split(',')  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —é–∑–µ—Ä–±–æ—Ç–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ INFO
# logging.basicConfig(level=logging.WARNING)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ WARNING
# logging.basicConfig(level=logging.ERROR)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ ERROR

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
dp = Dispatcher(bot)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    :param user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ False
    """
    return user_id == ADMIN_ID

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞
def get_userbot_status(userbot_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–±–æ—Ç–∞ (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω).
    
    :param userbot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —é–∑–µ—Ä–±–æ—Ç–∞
    :return: –°—Ç–∞—Ç—É—Å —é–∑–µ—Ä–±–æ—Ç–∞ ('1' - –≤–∫–ª—é—á–µ–Ω, '0' - –≤—ã–∫–ª—é—á–µ–Ω)
    """
    directory = f'data/{userbot_id}'
    os.makedirs(directory, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        with open(f'{directory}/{userbot_id}_status.txt', 'r') as file:
            return file.read().strip()
    except FileNotFoundError:
        return '0'

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞
def get_userbot_message(userbot_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —é–∑–µ—Ä–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç.
    
    :param userbot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —é–∑–µ—Ä–±–æ—Ç–∞
    :return: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    directory = f'data/{userbot_id}'
    os.makedirs(directory, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        with open(f'{directory}/{userbot_id}_message.txt', 'r', encoding='utf-8') as file:
            return file.read().strip()
    except FileNotFoundError:
        return ''

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not is_admin(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîå –í–ö–õ/–í–´–ö–õ", callback_data='manage_userbots'),
        types.InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data='settings')
    )
    await message.answer('üëæ *Telegram UserBot Auto Reply Control*', reply_markup=keyboard, parse_mode='Markdown')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data.startswith('manage_userbots'))
async def manage_userbots(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞–º–∏.
    
    :param callback_query: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    if not is_admin(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    if not any(userbots):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ userbots –ø—É—Å—Ç–æ–π
        keyboard.row(types.InlineKeyboardButton("üîΩ", callback_data='back_to_main'))
        await callback_query.message.edit_text("*–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞...*", reply_markup=keyboard, parse_mode='Markdown')
    else:
        buttons = []
        for ub in userbots:
            status = get_userbot_status(ub)
            if status == '1':
                buttons.append(types.InlineKeyboardButton(f"‚úÖ {ub}", callback_data=f'toggle_{ub}'))  # –í–∫–ª—é—á–µ–Ω
            else:
                buttons.append(types.InlineKeyboardButton(f"üîå {ub}", callback_data=f'toggle_{ub}'))  # –í—ã–∫–ª—é—á–µ–Ω
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º row_width
        for i in range(0, len(buttons), keyboard.row_width):
            keyboard.row(*buttons[i:i + keyboard.row_width])
        
        keyboard.row(types.InlineKeyboardButton("üîΩ", callback_data='back_to_main'))
        await callback_query.message.edit_text("*–ö–æ–≥–æ –≤–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º?*", reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query_handler(lambda c: c.data.startswith('toggle_'))
async def toggle_userbot(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞.
    
    :param callback_query: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    if not is_admin(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    userbot_id = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    current_status = get_userbot_status(userbot_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞
    new_status = '1' if current_status == '0' else '0'  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    directory = f'data/{userbot_id}'
    os.makedirs(directory, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    with open(f'{directory}/{userbot_id}_status.txt', 'w') as file:
        file.write(new_status)  # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–∞–π–ª

    await manage_userbots(callback_query)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞–º–∏
    await callback_query.answer(f"{userbot_id} {'–≤–∫–ª—é—á–µ–Ω' if new_status == '1' else '–≤—ã–∫–ª—é—á–µ–Ω'}.")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞

@dp.callback_query_handler(lambda c: c.data.startswith('settings'))
async def settings(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–±–æ—Ç–æ–≤.
    
    :param callback_query: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    if not is_admin(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)

    if not any(userbots):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ userbots –ø—É—Å—Ç–æ–π
        keyboard.row(types.InlineKeyboardButton("üîΩ", callback_data='back_to_main'))
        await callback_query.message.edit_text("*–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞...*", reply_markup=keyboard, parse_mode='Markdown')
    else:
        buttons = []
        for ub in userbots:
            message = get_userbot_message(ub)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞
            buttons.append(types.InlineKeyboardButton(f"üí¨ {ub}", callback_data=f'edit_message_{ub}'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º row_width
        for i in range(0, len(buttons), keyboard.row_width):
            keyboard.row(*buttons[i:i + keyboard.row_width])
        
        keyboard.row(types.InlineKeyboardButton("üîΩ", callback_data='back_to_main'))
        await callback_query.message.edit_text("*–ß—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?*", reply_markup=keyboard, parse_mode='Markdown')

@dp.callback_query_handler(lambda c: c.data.startswith('edit_message_'))
async def edit_message(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞.
    
    :param callback_query: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    if not is_admin(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    userbot_id = callback_query.data.split('_')[2]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    
    current_message = get_userbot_message(userbot_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞
    await callback_query.message.edit_text(f"---\n{current_message}\n---\n\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {userbot_id}:", parse_mode=None)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    @dp.message_handler(lambda message: message.from_user.id == ADMIN_ID)
    async def save_message(message: types.Message):
        directory = f'data/{userbot_id}'
        os.makedirs(directory, exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        formatted_message = reconstruct_message_with_formatting(message)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        with open(f'{directory}/{userbot_id}_message.txt', 'w', encoding='utf-8') as file:
            file.write(formatted_message)  # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

        # –û–±–Ω–æ–≤–ª—è–µ–º current_message –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        current_message = get_userbot_message(userbot_id)

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üîΩ", callback_data='back_to_main'))
        await callback_query.message.edit_text(f"---\n{current_message}\n---\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {userbot_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", parse_mode=None, reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.delete()

        # –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        dp.message_handlers.unregister(save_message)

def reconstruct_message_with_formatting(message: types.Message):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    text = message.text
    entities = message.entities or []
    formatted_message = ""
    last_offset = 0

    for entity in entities:
        formatted_message += text[last_offset:entity.offset]
        entity_text = text[entity.offset:entity.offset + entity.length]
        if entity.type == "bold":
            formatted_message += f"<b>{entity_text}</b>"
        elif entity.type == "italic":
            formatted_message += f"<i>{entity_text}</i>"
        elif entity.type == "underline":
            formatted_message += f"<u>{entity_text}</u>"
        elif entity.type == "strikethrough":
            formatted_message += f"<s>{entity_text}</s>"
        elif entity.type == "code":
            formatted_message += f"<code>{entity_text}</code>"
        elif entity.type == "pre":
            formatted_message += f"<pre><code>{entity_text}</code></pre>"
        elif entity.type == "text_link":
            formatted_message += f"<a href='{entity.url}'>{entity_text}</a>" 
        elif entity.type == "blockquote":
            formatted_message += f"<blockquote>{entity_text}</blockquote>"
        elif entity.type == "expandable_blockquote":
            formatted_message += f"<blockquote expandable>{entity_text}</blockquote>"
        last_offset = entity.offset + entity.length

    formatted_message += text[last_offset:]
    return formatted_message

@dp.callback_query_handler(lambda c: c.data.startswith('back_to_main'))
async def back_to_main(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    :param callback_query: –û–±—ä–µ–∫—Ç callback_query, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    if not is_admin(callback_query.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîå –í–ö–õ/–í–´–ö–õ", callback_data='manage_userbots'),
        types.InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data='settings')
    )
    await callback_query.message.edit_text('üëæ *Telegram UserBot Auto Reply Control*', reply_markup=keyboard, parse_mode='Markdown')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
async def set_bot_commands(dp: Dispatcher):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é.
    
    :param dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ú–µ–Ω—é"),
        types.BotCommand("start2", "–ú–µ–Ω—é2"),
    ])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=set_bot_commands)